# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test:
    docker:
      - image: google/cloud-sdk:454.0.0

    steps:
      - run:
          name: Check Python version
          command: |
            export VER_REGEX="^Python 3\.9(\.[0-9]+)?$"
            export PY_VER=$(python3 --version 2>&1)
            if ! [[ "$PY_VER" =~ $VER_REGEX ]] ; then echo "$PY_VER is not the expected version" && exit 1 ; fi

      - checkout

      # NOTE: each "run" command is executed in its own shell, so if you want future "run" blocks to execute in a
      #       virtualenv, you will need to activate virtualenv inside each "run" block
      - run:
          name: Setup virtualenv
          command: |
            apt-get update
            apt-get -y install python3-pip
            pip3 install virtualenv
            python3 -m virtualenv -p python3 virtualenv

      - run:
          name: Install dependencies
          command: |
            source virtualenv/bin/activate
            pip3 install -r requirements.txt --ignore-installed

      - run:
          name: Run tests
          command: |
            source virtualenv/bin/activate
            python -m unittest discover -s tests/unit -p "*_test.py"

      - run:
          name: Start Datastore Emulator
          command: ./tests/datastore_emulator/run_emulator.sh
          background: true

      - run:
          name: Run Datastore Eumulator Tests
          # Sleep to let the emulator start up before running tests.
          command: |
            sleep 10
            source virtualenv/bin/activate
            ./tests/datastore_emulator/test.sh


  build-docker-image:
    docker:
      - image: circleci/python:3.9.2

    environment:
      IMAGE_NAME: quay.io/databiosphere/bond

    steps:
      - checkout

      - setup_remote_docker
      - run:
          name: Build image
          command: |
            docker build -t ${IMAGE_NAME}:${CIRCLE_BRANCH} -f docker/Dockerfile .
            if [[ ${CIRCLE_BRANCH} == "develop" ]]; then docker tag ${IMAGE_NAME}:${CIRCLE_BRANCH} ${IMAGE_NAME}:latest ; fi
            if [[ ${CIRCLE_BRANCH} == "develop" ]]; then docker tag ${IMAGE_NAME}:${CIRCLE_BRANCH} ${IMAGE_NAME}:${CIRCLE_SHA1:0:12} ; fi

      - run:
          name: Build deploy image
          command: |
            docker build -t ${IMAGE_NAME}:deploy_${CIRCLE_BRANCH} -f docker/Dockerfile-deploy .
            if [[ ${CIRCLE_BRANCH} == "develop" ]]; then docker tag ${IMAGE_NAME}:deploy_${CIRCLE_BRANCH} ${IMAGE_NAME}:deploy_latest ; fi
            if [[ ${CIRCLE_BRANCH} == "develop" ]]; then docker tag ${IMAGE_NAME}:deploy_${CIRCLE_BRANCH} ${IMAGE_NAME}:deploy_${CIRCLE_SHA1:0:12} ; fi

      - run:
          name: Run functional tests
          command: |
            docker run --entrypoint /bin/bash --workdir "/app" ${IMAGE_NAME}:${CIRCLE_BRANCH} -c "./tests/functional_test.sh"

      - run:
          # By not specifying a tag in the `docker push` command, this will ensure that all tags/images for the ${IMAGE_NAME} will be pushed
          name: Push image and tags to quay.io
          command: |
            docker login -u="${QUAY_USER}" -p="${QUAY_USER_PW}" quay.io
            docker push ${IMAGE_NAME}

  tag:
    docker:
      - image: alpine/git

    steps:
      - add_ssh_keys:
          fingerprints:
            - "d3:71:dc:2c:00:ff:c8:9e:88:5c:f2:d4:2a:06:e7:0c"
      - checkout
      - run:
          when: on_success
          command: |
            echo 'export TAG_NAME=dev_tests_passed_$(date +%b_%d_%Y-%H_%M_%S)' >> $BASH_ENV
            source $BASH_ENV
            git tag $TAG_NAME
            git push origin $TAG_NAME

workflows:
  version: 2
  test-and-tag:
    jobs:
      - test
      - tag:
          requires:
            - test
            - build-docker-image
          filters:
            branches:
              only: develop
      - build-docker-image
