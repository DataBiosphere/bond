# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test:
    docker:
      - image: google/cloud-sdk:218.0.0

    environment:
      - PYTHONPATH: /usr/local/google_appengine

    steps:
      - run:
          name: Check Python version
          command: |
            export VER_REGEX="^Python 2\.7(\.[0-9]+)?$"
            export PY_VER=$(python --version 2>&1)
            if ! [[ "$PY_VER" =~ $VER_REGEX ]] ; then echo "$PY_VER is not the expected version" && exit 1 ; fi

      - checkout

      # NOTE: each "run" command is executed in its own shell, so if you want future "run" blocks to execute in a
      #       virtualenv, you will need to activate virtualenv inside each "run" block
      - run:
          name: Setup virtualenv
          command: |
            pip install virtualenv
            python -m virtualenv -p python virtualenv

      - run:
          name: Install dependencies
          command: |
            source virtualenv/bin/activate
            pip install -t lib -r requirements.txt --ignore-installed

      - run:
          name: Run tests
          command: |
            source virtualenv/bin/activate
            python tests/test_runner.py `gcloud info --format="value(installation.sdk_root)"`

  build-docker-image:
    docker:
      - image: circleci/python:2.7.14

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Build image
          command: |
            docker build -t databiosphere/bond:foo -f docker/Dockerfile .

      - run:
          name: Run functional tests
          command: |
            docker run --entrypoint /bin/bash --workdir "/app" databiosphere/bond:foobar -c "./tests/functional_test.sh"

      - run:
          name: Push image to quay.io
          command: |
            echo "TODO: Implement this step!"

  run-functional-tests:
    docker:
      - image: circleci/python:2.7.14

    steps:

#      - setup_remote_docker:
#          docker_layer_caching: true

      - run:
          name: Run functional tests
          command: |
            docker run --entrypoint /bin/bash --workdir "/app" databiosphere/bond:foobar -c "./tests/functional_test.sh"

  tag:
    docker:
      - image: alpine/git

    steps:
      - add_ssh_keys:
          fingerprints:
            - "ab:2d:12:de:d1:ac:36:0b:6a:02:92:3f:2c:49:98:c9"
      - checkout
      - run:
          when: on_success
          command: |
            echo 'export TAG_NAME=dev_tests_passed_$(date +%b_%d_%Y-%H_%M_%S)' >> $BASH_ENV
            source $BASH_ENV
            git tag $TAG_NAME
            git push origin $TAG_NAME

workflows:
  version: 2
  test-and-tag:
    jobs:
      - test
      - tag:
          requires:
            - test
            - build-docker-image
          filters:
            branches:
              only: develop
      - build-docker-image
      - run-functional-tests:
          requires:
            - build-docker-image
